from flask import Flask, request, jsonify
from flask_cors import CORS
import sympy as sp

app = Flask(__name__)
CORS(app)

s, t = sp.symbols('s t')

def inversa_laplace(expresion_str):
    try:
        expresion = sp.sympify(expresion_str) / s  # Aplicar escal√≥n autom√°ticamente
        print(f"\nüîπ Funci√≥n recibida: {expresion_str}")
        print(f"üîπ Funci√≥n con escal√≥n aplicado: {expresion}")

        inversa = None  # Variable para almacenar la soluci√≥n final

        # Intentar resolver con el m√©todo directo de SymPy
        try:
            inversa = sp.inverse_laplace_transform(expresion, s, t)
            print(f"‚úÖ M√©todo Usado: Directo de SymPy")
        except Exception as e:
            print(f"‚ö†Ô∏è No se pudo hacer con el m√©todo directo: {e}")

        # Intentar resolver con Fracciones Parciales si el m√©todo directo fall√≥
        if inversa is None:
            try:
                descomposicion = sp.apart(expresion, s)
                print(f"‚úÖ M√©todo Usado: Fracciones Parciales")
                print(f"üîπ Expresi√≥n descompuesta: {descomposicion}")
                inversa = sp.inverse_laplace_transform(descomposicion, s, t)
            except Exception as e:
                print(f"‚ö†Ô∏è No se pudo hacer fracciones parciales: {e}")

        # Si fracciones parciales tambi√©n fall√≥, usar m√©todo num√©rico
        if inversa is None:
            try:
                print(f"‚úÖ M√©todo Usado: Aproximaci√≥n Num√©rica")
                inversa = sp.inverse_laplace_transform(expresion, s, t, noconds=True)

                # üîπ Como √∫ltimo recurso, usar serie de Taylor
                if not inversa.has(t):  # Si SymPy no gener√≥ una funci√≥n con 't'
                    inversa = sp.series(inversa, t, n=6).removeO()
            except Exception as e:
                print(f"‚ö†Ô∏è No se pudo calcular por ning√∫n m√©todo: {e}")
                return "Error en el c√°lculo"

        # üîπ Reemplazo final para mejorar la presentaci√≥n
        inversa = inversa.replace(sp.Heaviside(t), 1)  # Evitar que aparezca Heaviside(t)
        inversa = sp.simplify(inversa.rewrite(sp.exp).expand(trig=True))  # Evitar n√∫meros complejos

        return str(inversa)

    except Exception as e:
        return f"Error en la expresi√≥n ingresada: {str(e)}"

@app.route('/laplace', methods=['GET'])
def calcular_laplace():
    expresion = request.args.get('expresion', "1 / (s + 1)")
    resultado = inversa_laplace(expresion)
    return jsonify({"resultado": resultado})

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)

